--
-- Copyright (c) 2010 Jiri Svoboda
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions
-- are met:
--
-- o Redistributions of source code must retain the above copyright
--   notice, this list of conditions and the following disclaimer.
-- o Redistributions in binary form must reproduce the above copyright
--   notice, this list of conditions and the following disclaimer in the
--   documentation and/or other materials provided with the distribution.
-- o The name of the author may not be used to endorse or promote products
--   derived from this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
-- IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-- OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
-- IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
-- INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
-- NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
-- THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--

class DelegateDemo is
	fun Main(), static is
		var demo : DelegateClass;

		demo = new DelegateClass();
		demo.Run();
	end
end

class DelegateClass is
	fun Run() is
		var op : BinaryOp;

		-- The anonymous delegate to self.Add is implicitly
		-- converted to BinaryOp. This is allowed as long as
		-- the signature matches.
		op = Add;

		-- Pass delegate to Operate()
		Operate(op, "Add");

		-- Obviously the intermediate step through a variable
		-- is redundant.
		Operate(Subtract, "Subtract");
	end

	-- Function having delegate as the first parameger
	fun Operate(op : BinaryOp; opName : string) is
		Console.Write(opName + "(1, 2): ");
		Console.WriteLine(op(1, 2));
	end

	-- A function matching the delegate signature
	fun Add(a : int; b : int) : int is
		return a + b;
	end

	-- Another function matching the delegate signature
	fun Subtract(a : int; b : int) : int is
		return a - b;
	end

	-- Declaration of a delegate.
	deleg BinaryOp(a : int; b : int) : int;
end
